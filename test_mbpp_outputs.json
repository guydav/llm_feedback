{"text": "Write a function to find the longest chain which can be formed from the given set of pairs.", "test_list_0": "assert max_chain_length([Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)], 4) == 3", "test_list_1": "assert max_chain_length([Pair(1, 2), Pair(3, 4),Pair(5, 6), Pair(7, 8)], 4) == 4", "test_list_2": "assert max_chain_length([Pair(19, 10), Pair(11, 12),Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5) == 5", "initial_solution": "```python\nfrom typing import List\n\nclass Pair:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n\ndef max_chain_length(pairs: List[Pair], n: int) -> int:\n    pairs.sort(key=lambda x: x.b)\n    count = 1\n    curr_end = pairs[0].b\n    for i in range(1, n):\n        if pairs[i].a > curr_end:\n            count += 1\n            curr_end = pairs[i].b\n    return count\n```", "feedback": "OK.", "refinement": "from typing import List\n\nclass Pair:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n\ndef max_chain_length(pairs: List[Pair], n: int) -> int:\n    pairs.sort(key=lambda x: x.b)\n    count = 1\n    curr_end = pairs[0].b\n    for i in range(1, n):\n        if pairs[i].a > curr_end:\n            count += 1\n            curr_end = pairs[i].b\n    return count"}
